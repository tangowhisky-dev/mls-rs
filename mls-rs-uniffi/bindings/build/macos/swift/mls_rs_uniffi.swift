// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(mls_rs_uniffiFFI)
import mls_rs_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_mls_rs_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_mls_rs_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * An MLS client used to create key packages and manage groups.
 *
 * See [`mls_rs::Client`] for details.
 */
public protocol ClientProtocol : AnyObject {
    
    /**
     * Create and immediately join a new group.
     *
     * If a group ID is not given, the underlying library will create
     * a unique ID for you.
     *
     * See [`mls_rs::Client::create_group`] and
     * [`mls_rs::Client::create_group_with_id`] for details.
     */
    func createGroup(groupId: Data?) throws  -> Group
    
    /**
     * Generate a new key package for this client.
     *
     * The key package is represented in is MLS message form. It is
     * needed when joining a group and can be published to a server
     * so other clients can look it up.
     *
     * See [`mls_rs::Client::generate_key_package_message`] for
     * details.
     */
    func generateKeyPackageMessage() throws  -> Message
    
    /**
     * Join an existing group.
     *
     * You must supply `ratchet_tree` if the client that created
     * `welcome_message` did not set `use_ratchet_tree_extension`.
     *
     * See [`mls_rs::Client::join_group`] for details.
     */
    func joinGroup(ratchetTree: RatchetTree?, welcomeMessage: Message) throws  -> JoinInfo
    
    /**
     * Load an existing group.
     *
     * See [`mls_rs::Client::load_group`] for details.
     */
    func loadGroup(groupId: Data) throws  -> Group
    
    func signingIdentity() throws  -> SigningIdentity
    
}

/**
 * An MLS client used to create key packages and manage groups.
 *
 * See [`mls_rs::Client`] for details.
 */
open class Client:
    ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_client(self.pointer, $0) }
    }
    /**
     * Create a new client.
     *
     * The user is identified by `id`, which will be used to create a
     * basic credential together with the signature keypair.
     *
     * See [`mls_rs::Client::builder`] for details.
     */
public convenience init(id: Data, signatureKeypair: SignatureKeypair, clientConfig: ClientConfig) {
    let pointer = try! rustCall() {
    uniffi_mls_rs_uniffi_fn_constructor_client_new(
        FfiConverterData.lower(id),
        FfiConverterTypeSignatureKeypair.lower(signatureKeypair),
        FfiConverterTypeClientConfig.lower(clientConfig),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_client(pointer, $0) }
    }

    

    
    /**
     * Create and immediately join a new group.
     *
     * If a group ID is not given, the underlying library will create
     * a unique ID for you.
     *
     * See [`mls_rs::Client::create_group`] and
     * [`mls_rs::Client::create_group_with_id`] for details.
     */
open func createGroup(groupId: Data?)throws  -> Group {
    return try  FfiConverterTypeGroup.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_client_create_group(self.uniffiClonePointer(),
        FfiConverterOptionData.lower(groupId),$0
    )
})
}
    
    /**
     * Generate a new key package for this client.
     *
     * The key package is represented in is MLS message form. It is
     * needed when joining a group and can be published to a server
     * so other clients can look it up.
     *
     * See [`mls_rs::Client::generate_key_package_message`] for
     * details.
     */
open func generateKeyPackageMessage()throws  -> Message {
    return try  FfiConverterTypeMessage.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_client_generate_key_package_message(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Join an existing group.
     *
     * You must supply `ratchet_tree` if the client that created
     * `welcome_message` did not set `use_ratchet_tree_extension`.
     *
     * See [`mls_rs::Client::join_group`] for details.
     */
open func joinGroup(ratchetTree: RatchetTree?, welcomeMessage: Message)throws  -> JoinInfo {
    return try  FfiConverterTypeJoinInfo.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_client_join_group(self.uniffiClonePointer(),
        FfiConverterOptionTypeRatchetTree.lower(ratchetTree),
        FfiConverterTypeMessage.lower(welcomeMessage),$0
    )
})
}
    
    /**
     * Load an existing group.
     *
     * See [`mls_rs::Client::load_group`] for details.
     */
open func loadGroup(groupId: Data)throws  -> Group {
    return try  FfiConverterTypeGroup.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_client_load_group(self.uniffiClonePointer(),
        FfiConverterData.lower(groupId),$0
    )
})
}
    
open func signingIdentity()throws  -> SigningIdentity {
    return try  FfiConverterTypeSigningIdentity.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_client_signing_identity(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
    return try FfiConverterTypeClient.lift(pointer)
}

public func FfiConverterTypeClient_lower(_ value: Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeClient.lower(value)
}




/**
 * A [`mls_rs::Extension`] wrapper.
 */
public protocol ExtensionProtocol : AnyObject {
    
}

/**
 * A [`mls_rs::Extension`] wrapper.
 */
open class Extension:
    ExtensionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_extension(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_extension(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeExtension: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Extension

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Extension {
        return Extension(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Extension) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Extension {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Extension, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeExtension_lift(_ pointer: UnsafeMutableRawPointer) throws -> Extension {
    return try FfiConverterTypeExtension.lift(pointer)
}

public func FfiConverterTypeExtension_lower(_ value: Extension) -> UnsafeMutableRawPointer {
    return FfiConverterTypeExtension.lower(value)
}




/**
 * A [`mls_rs::ExtensionList`] wrapper.
 */
public protocol ExtensionListProtocol : AnyObject {
    
}

/**
 * A [`mls_rs::ExtensionList`] wrapper.
 */
open class ExtensionList:
    ExtensionListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_extensionlist(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_extensionlist(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeExtensionList: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ExtensionList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ExtensionList {
        return ExtensionList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ExtensionList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExtensionList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ExtensionList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeExtensionList_lift(_ pointer: UnsafeMutableRawPointer) throws -> ExtensionList {
    return try FfiConverterTypeExtensionList.lift(pointer)
}

public func FfiConverterTypeExtensionList_lower(_ value: ExtensionList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeExtensionList.lower(value)
}




/**
 * An MLS end-to-end encrypted group.
 *
 * The group is used to send and process incoming messages and to
 * add/remove users.
 *
 * See [`mls_rs::Group`] for details.
 */
public protocol GroupProtocol : AnyObject {
    
    /**
     * Commit the addition of one or more members.
     *
     * The members are representated by key packages. The result is
     * the welcome messages to send to the new members.
     *
     * See [`mls_rs::group::CommitBuilder::add_member`] for details.
     */
    func addMembers(keyPackages: [Message]) throws  -> CommitOutput
    
    /**
     * Perform a commit of received proposals (or an empty commit).
     *
     * TODO: ensure `path_required` is always set in
     * [`MlsRules::commit_options`](`mls_rs::MlsRules::commit_options`).
     *
     * Returns the resulting commit message. See
     * [`mls_rs::Group::commit`] for details.
     */
    func commit() throws  -> CommitOutput
    
    /**
     * Encrypt an application message using the current group state.
     *
     * An application message is an application-specific payload,
     * e.g., an UTF-8 encoded text message in a chat app. The
     * encoding is not determined by MLS and applications will have
     * to implement their own mechanism for how to agree on the
     * content encoding.
     *
     * The other group members will find the message in
     * [`ReceivedMessage::ApplicationMessage`] after calling
     * [`Group::process_incoming_message`].
     */
    func encryptApplicationMessage(message: Data) throws  -> Message
    
    /**
     * Export the current epoch's ratchet tree in serialized format.
     *
     * This function is used to provide the current group tree to new
     * members when `use_ratchet_tree_extension` is set to false in
     * `ClientConfig`.
     */
    func exportTree() throws  -> RatchetTree
    
    /**
     * Process an inbound message for this group.
     */
    func processIncomingMessage(message: Message) throws  -> ReceivedMessage
    
    /**
     * Propose to add one or more members to this group.
     *
     * The members are representated by key packages. The result is
     * the proposal messages to send to the group.
     *
     * See [`mls_rs::Group::propose_add`] for details.
     */
    func proposeAddMembers(keyPackages: [Message]) throws  -> [Message]
    
    /**
     * Propose to remove one or more members from this group.
     *
     * The members are representated by their signing identities. The
     * result is the proposal messages to send to the group.
     *
     * See [`mls_rs::group::Group::propose_remove`] for details.
     */
    func proposeRemoveMembers(signingIdentities: [SigningIdentity]) throws  -> [Message]
    
    /**
     * Propose and commit the removal of one or more members.
     *
     * The members are representated by their signing identities.
     *
     * See [`mls_rs::group::CommitBuilder::remove_member`] for details.
     */
    func removeMembers(signingIdentities: [SigningIdentity]) throws  -> CommitOutput
    
    /**
     * Write the current state of the group to storage defined by
     * [`ClientConfig::group_state_storage`]
     */
    func writeToStorage() throws 
    
}

/**
 * An MLS end-to-end encrypted group.
 *
 * The group is used to send and process incoming messages and to
 * add/remove users.
 *
 * See [`mls_rs::Group`] for details.
 */
open class Group:
    GroupProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_group(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_group(pointer, $0) }
    }

    

    
    /**
     * Commit the addition of one or more members.
     *
     * The members are representated by key packages. The result is
     * the welcome messages to send to the new members.
     *
     * See [`mls_rs::group::CommitBuilder::add_member`] for details.
     */
open func addMembers(keyPackages: [Message])throws  -> CommitOutput {
    return try  FfiConverterTypeCommitOutput.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_add_members(self.uniffiClonePointer(),
        FfiConverterSequenceTypeMessage.lower(keyPackages),$0
    )
})
}
    
    /**
     * Perform a commit of received proposals (or an empty commit).
     *
     * TODO: ensure `path_required` is always set in
     * [`MlsRules::commit_options`](`mls_rs::MlsRules::commit_options`).
     *
     * Returns the resulting commit message. See
     * [`mls_rs::Group::commit`] for details.
     */
open func commit()throws  -> CommitOutput {
    return try  FfiConverterTypeCommitOutput.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_commit(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Encrypt an application message using the current group state.
     *
     * An application message is an application-specific payload,
     * e.g., an UTF-8 encoded text message in a chat app. The
     * encoding is not determined by MLS and applications will have
     * to implement their own mechanism for how to agree on the
     * content encoding.
     *
     * The other group members will find the message in
     * [`ReceivedMessage::ApplicationMessage`] after calling
     * [`Group::process_incoming_message`].
     */
open func encryptApplicationMessage(message: Data)throws  -> Message {
    return try  FfiConverterTypeMessage.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_encrypt_application_message(self.uniffiClonePointer(),
        FfiConverterData.lower(message),$0
    )
})
}
    
    /**
     * Export the current epoch's ratchet tree in serialized format.
     *
     * This function is used to provide the current group tree to new
     * members when `use_ratchet_tree_extension` is set to false in
     * `ClientConfig`.
     */
open func exportTree()throws  -> RatchetTree {
    return try  FfiConverterTypeRatchetTree.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_export_tree(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Process an inbound message for this group.
     */
open func processIncomingMessage(message: Message)throws  -> ReceivedMessage {
    return try  FfiConverterTypeReceivedMessage.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_process_incoming_message(self.uniffiClonePointer(),
        FfiConverterTypeMessage.lower(message),$0
    )
})
}
    
    /**
     * Propose to add one or more members to this group.
     *
     * The members are representated by key packages. The result is
     * the proposal messages to send to the group.
     *
     * See [`mls_rs::Group::propose_add`] for details.
     */
open func proposeAddMembers(keyPackages: [Message])throws  -> [Message] {
    return try  FfiConverterSequenceTypeMessage.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_propose_add_members(self.uniffiClonePointer(),
        FfiConverterSequenceTypeMessage.lower(keyPackages),$0
    )
})
}
    
    /**
     * Propose to remove one or more members from this group.
     *
     * The members are representated by their signing identities. The
     * result is the proposal messages to send to the group.
     *
     * See [`mls_rs::group::Group::propose_remove`] for details.
     */
open func proposeRemoveMembers(signingIdentities: [SigningIdentity])throws  -> [Message] {
    return try  FfiConverterSequenceTypeMessage.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_propose_remove_members(self.uniffiClonePointer(),
        FfiConverterSequenceTypeSigningIdentity.lower(signingIdentities),$0
    )
})
}
    
    /**
     * Propose and commit the removal of one or more members.
     *
     * The members are representated by their signing identities.
     *
     * See [`mls_rs::group::CommitBuilder::remove_member`] for details.
     */
open func removeMembers(signingIdentities: [SigningIdentity])throws  -> CommitOutput {
    return try  FfiConverterTypeCommitOutput.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_remove_members(self.uniffiClonePointer(),
        FfiConverterSequenceTypeSigningIdentity.lower(signingIdentities),$0
    )
})
}
    
    /**
     * Write the current state of the group to storage defined by
     * [`ClientConfig::group_state_storage`]
     */
open func writeToStorage()throws  {try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_group_write_to_storage(self.uniffiClonePointer(),$0
    )
}
}
    

}

public struct FfiConverterTypeGroup: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Group

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Group {
        return Group(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Group) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Group {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Group, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeGroup_lift(_ pointer: UnsafeMutableRawPointer) throws -> Group {
    return try FfiConverterTypeGroup.lift(pointer)
}

public func FfiConverterTypeGroup_lower(_ value: Group) -> UnsafeMutableRawPointer {
    return FfiConverterTypeGroup.lower(value)
}




public protocol GroupStateStorage : AnyObject {
    
    func state(groupId: Data) throws  -> Data?
    
    func epoch(groupId: Data, epochId: UInt64) throws  -> Data?
    
    func write(groupId: Data, groupState: Data, epochInserts: [EpochRecord], epochUpdates: [EpochRecord]) throws 
    
    func maxEpochId(groupId: Data) throws  -> UInt64?
    
}

open class GroupStateStorageImpl:
    GroupStateStorage {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_groupstatestorage(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_groupstatestorage(pointer, $0) }
    }

    

    
open func state(groupId: Data)throws  -> Data? {
    return try  FfiConverterOptionData.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_groupstatestorage_state(self.uniffiClonePointer(),
        FfiConverterData.lower(groupId),$0
    )
})
}
    
open func epoch(groupId: Data, epochId: UInt64)throws  -> Data? {
    return try  FfiConverterOptionData.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_groupstatestorage_epoch(self.uniffiClonePointer(),
        FfiConverterData.lower(groupId),
        FfiConverterUInt64.lower(epochId),$0
    )
})
}
    
open func write(groupId: Data, groupState: Data, epochInserts: [EpochRecord], epochUpdates: [EpochRecord])throws  {try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_groupstatestorage_write(self.uniffiClonePointer(),
        FfiConverterData.lower(groupId),
        FfiConverterData.lower(groupState),
        FfiConverterSequenceTypeEpochRecord.lower(epochInserts),
        FfiConverterSequenceTypeEpochRecord.lower(epochUpdates),$0
    )
}
}
    
open func maxEpochId(groupId: Data)throws  -> UInt64? {
    return try  FfiConverterOptionUInt64.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_method_groupstatestorage_max_epoch_id(self.uniffiClonePointer(),
        FfiConverterData.lower(groupId),$0
    )
})
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceGroupStateStorage {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceGroupStateStorage = UniffiVTableCallbackInterfaceGroupStateStorage(
        state: { (
            uniffiHandle: UInt64,
            groupId: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data? in
                guard let uniffiObj = try? FfiConverterTypeGroupStateStorage.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.state(
                     groupId: try FfiConverterData.lift(groupId)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionData.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeError.lower
            )
        },
        epoch: { (
            uniffiHandle: UInt64,
            groupId: RustBuffer,
            epochId: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data? in
                guard let uniffiObj = try? FfiConverterTypeGroupStateStorage.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.epoch(
                     groupId: try FfiConverterData.lift(groupId),
                     epochId: try FfiConverterUInt64.lift(epochId)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionData.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeError.lower
            )
        },
        write: { (
            uniffiHandle: UInt64,
            groupId: RustBuffer,
            groupState: RustBuffer,
            epochInserts: RustBuffer,
            epochUpdates: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeGroupStateStorage.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.write(
                     groupId: try FfiConverterData.lift(groupId),
                     groupState: try FfiConverterData.lift(groupState),
                     epochInserts: try FfiConverterSequenceTypeEpochRecord.lift(epochInserts),
                     epochUpdates: try FfiConverterSequenceTypeEpochRecord.lift(epochUpdates)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeError.lower
            )
        },
        maxEpochId: { (
            uniffiHandle: UInt64,
            groupId: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> UInt64? in
                guard let uniffiObj = try? FfiConverterTypeGroupStateStorage.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.maxEpochId(
                     groupId: try FfiConverterData.lift(groupId)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionUInt64.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeGroupStateStorage.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface GroupStateStorage: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitGroupStateStorage() {
    uniffi_mls_rs_uniffi_fn_init_callback_vtable_groupstatestorage(&UniffiCallbackInterfaceGroupStateStorage.vtable)
}

public struct FfiConverterTypeGroupStateStorage: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<GroupStateStorage>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = GroupStateStorage

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> GroupStateStorage {
        return GroupStateStorageImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: GroupStateStorage) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GroupStateStorage {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: GroupStateStorage, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeGroupStateStorage_lift(_ pointer: UnsafeMutableRawPointer) throws -> GroupStateStorage {
    return try FfiConverterTypeGroupStateStorage.lift(pointer)
}

public func FfiConverterTypeGroupStateStorage_lower(_ value: GroupStateStorage) -> UnsafeMutableRawPointer {
    return FfiConverterTypeGroupStateStorage.lower(value)
}




/**
 * A [`mls_rs::MlsMessage`] wrapper.
 */
public protocol MessageProtocol : AnyObject {
    
}

/**
 * A [`mls_rs::MlsMessage`] wrapper.
 */
open class Message:
    MessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_message(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_message(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeMessage: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Message

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Message {
        return Message(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Message) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Message {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Message, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeMessage_lift(_ pointer: UnsafeMutableRawPointer) throws -> Message {
    return try FfiConverterTypeMessage.lift(pointer)
}

public func FfiConverterTypeMessage_lower(_ value: Message) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMessage.lower(value)
}




public protocol ProposalProtocol : AnyObject {
    
}

open class Proposal:
    ProposalProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_proposal(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_proposal(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeProposal: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Proposal

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Proposal {
        return Proposal(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Proposal) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Proposal {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Proposal, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeProposal_lift(_ pointer: UnsafeMutableRawPointer) throws -> Proposal {
    return try FfiConverterTypeProposal.lift(pointer)
}

public func FfiConverterTypeProposal_lower(_ value: Proposal) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProposal.lower(value)
}




public protocol SigningIdentityProtocol : AnyObject {
    
}

open class SigningIdentity:
    Equatable,
    SigningIdentityProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mls_rs_uniffi_fn_clone_signingidentity(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mls_rs_uniffi_fn_free_signingidentity(pointer, $0) }
    }

    

    
    public static func == (self: SigningIdentity, other: SigningIdentity) -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
    uniffi_mls_rs_uniffi_fn_method_signingidentity_uniffi_trait_eq_eq(self.uniffiClonePointer(),
        FfiConverterTypeSigningIdentity.lower(other),$0
    )
}
        )
    }

}

public struct FfiConverterTypeSigningIdentity: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SigningIdentity

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SigningIdentity {
        return SigningIdentity(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SigningIdentity) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningIdentity {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SigningIdentity, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeSigningIdentity_lift(_ pointer: UnsafeMutableRawPointer) throws -> SigningIdentity {
    return try FfiConverterTypeSigningIdentity.lift(pointer)
}

public func FfiConverterTypeSigningIdentity_lower(_ value: SigningIdentity) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSigningIdentity.lower(value)
}


public struct ClientConfig {
    public var groupStateStorage: GroupStateStorage
    /**
     * Use the ratchet tree extension. If this is false, then you
     * must supply `ratchet_tree` out of band to clients.
     */
    public var useRatchetTreeExtension: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(groupStateStorage: GroupStateStorage, 
        /**
         * Use the ratchet tree extension. If this is false, then you
         * must supply `ratchet_tree` out of band to clients.
         */useRatchetTreeExtension: Bool) {
        self.groupStateStorage = groupStateStorage
        self.useRatchetTreeExtension = useRatchetTreeExtension
    }
}



public struct FfiConverterTypeClientConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientConfig {
        return
            try ClientConfig(
                groupStateStorage: FfiConverterTypeGroupStateStorage.read(from: &buf), 
                useRatchetTreeExtension: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: ClientConfig, into buf: inout [UInt8]) {
        FfiConverterTypeGroupStateStorage.write(value.groupStateStorage, into: &buf)
        FfiConverterBool.write(value.useRatchetTreeExtension, into: &buf)
    }
}


public func FfiConverterTypeClientConfig_lift(_ buf: RustBuffer) throws -> ClientConfig {
    return try FfiConverterTypeClientConfig.lift(buf)
}

public func FfiConverterTypeClientConfig_lower(_ value: ClientConfig) -> RustBuffer {
    return FfiConverterTypeClientConfig.lower(value)
}


public struct CommitOutput {
    /**
     * Commit message to send to other group members.
     */
    public var commitMessage: Message
    /**
     * Welcome message to send to new group members. This will be
     * `None` if the commit did not add new members.
     */
    public var welcomeMessage: Message?
    /**
     * Ratchet tree that can be sent out of band if the ratchet tree
     * extension is not used.
     */
    public var ratchetTree: RatchetTree?
    /**
     * A group info that can be provided to new members in order to
     * enable external commit functionality.
     */
    public var groupInfo: Message?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Commit message to send to other group members.
         */commitMessage: Message, 
        /**
         * Welcome message to send to new group members. This will be
         * `None` if the commit did not add new members.
         */welcomeMessage: Message?, 
        /**
         * Ratchet tree that can be sent out of band if the ratchet tree
         * extension is not used.
         */ratchetTree: RatchetTree?, 
        /**
         * A group info that can be provided to new members in order to
         * enable external commit functionality.
         */groupInfo: Message?) {
        self.commitMessage = commitMessage
        self.welcomeMessage = welcomeMessage
        self.ratchetTree = ratchetTree
        self.groupInfo = groupInfo
    }
}



public struct FfiConverterTypeCommitOutput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CommitOutput {
        return
            try CommitOutput(
                commitMessage: FfiConverterTypeMessage.read(from: &buf), 
                welcomeMessage: FfiConverterOptionTypeMessage.read(from: &buf), 
                ratchetTree: FfiConverterOptionTypeRatchetTree.read(from: &buf), 
                groupInfo: FfiConverterOptionTypeMessage.read(from: &buf)
        )
    }

    public static func write(_ value: CommitOutput, into buf: inout [UInt8]) {
        FfiConverterTypeMessage.write(value.commitMessage, into: &buf)
        FfiConverterOptionTypeMessage.write(value.welcomeMessage, into: &buf)
        FfiConverterOptionTypeRatchetTree.write(value.ratchetTree, into: &buf)
        FfiConverterOptionTypeMessage.write(value.groupInfo, into: &buf)
    }
}


public func FfiConverterTypeCommitOutput_lift(_ buf: RustBuffer) throws -> CommitOutput {
    return try FfiConverterTypeCommitOutput.lift(buf)
}

public func FfiConverterTypeCommitOutput_lower(_ value: CommitOutput) -> RustBuffer {
    return FfiConverterTypeCommitOutput.lower(value)
}


public struct EpochRecord {
    /**
     * A unique epoch identifier within a particular group.
     */
    public var id: UInt64
    public var data: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * A unique epoch identifier within a particular group.
         */id: UInt64, data: Data) {
        self.id = id
        self.data = data
    }
}



extension EpochRecord: Equatable, Hashable {
    public static func ==(lhs: EpochRecord, rhs: EpochRecord) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(data)
    }
}


public struct FfiConverterTypeEpochRecord: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EpochRecord {
        return
            try EpochRecord(
                id: FfiConverterUInt64.read(from: &buf), 
                data: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: EpochRecord, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterData.write(value.data, into: &buf)
    }
}


public func FfiConverterTypeEpochRecord_lift(_ buf: RustBuffer) throws -> EpochRecord {
    return try FfiConverterTypeEpochRecord.lift(buf)
}

public func FfiConverterTypeEpochRecord_lower(_ value: EpochRecord) -> RustBuffer {
    return FfiConverterTypeEpochRecord.lower(value)
}


/**
 * A [`mls_rs::Group`] and [`mls_rs::group::NewMemberInfo`] wrapper.
 */
public struct JoinInfo {
    /**
     * The group that was joined.
     */
    public var group: Group
    /**
     * Group info extensions found within the Welcome message used to join
     * the group.
     */
    public var groupInfoExtensions: ExtensionList

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The group that was joined.
         */group: Group, 
        /**
         * Group info extensions found within the Welcome message used to join
         * the group.
         */groupInfoExtensions: ExtensionList) {
        self.group = group
        self.groupInfoExtensions = groupInfoExtensions
    }
}



public struct FfiConverterTypeJoinInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JoinInfo {
        return
            try JoinInfo(
                group: FfiConverterTypeGroup.read(from: &buf), 
                groupInfoExtensions: FfiConverterTypeExtensionList.read(from: &buf)
        )
    }

    public static func write(_ value: JoinInfo, into buf: inout [UInt8]) {
        FfiConverterTypeGroup.write(value.group, into: &buf)
        FfiConverterTypeExtensionList.write(value.groupInfoExtensions, into: &buf)
    }
}


public func FfiConverterTypeJoinInfo_lift(_ buf: RustBuffer) throws -> JoinInfo {
    return try FfiConverterTypeJoinInfo.lift(buf)
}

public func FfiConverterTypeJoinInfo_lower(_ value: JoinInfo) -> RustBuffer {
    return FfiConverterTypeJoinInfo.lower(value)
}


public struct RatchetTree {
    public var bytes: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bytes: Data) {
        self.bytes = bytes
    }
}



extension RatchetTree: Equatable, Hashable {
    public static func ==(lhs: RatchetTree, rhs: RatchetTree) -> Bool {
        if lhs.bytes != rhs.bytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytes)
    }
}


public struct FfiConverterTypeRatchetTree: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RatchetTree {
        return
            try RatchetTree(
                bytes: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: RatchetTree, into buf: inout [UInt8]) {
        FfiConverterData.write(value.bytes, into: &buf)
    }
}


public func FfiConverterTypeRatchetTree_lift(_ buf: RustBuffer) throws -> RatchetTree {
    return try FfiConverterTypeRatchetTree.lift(buf)
}

public func FfiConverterTypeRatchetTree_lower(_ value: RatchetTree) -> RustBuffer {
    return FfiConverterTypeRatchetTree.lower(value)
}


/**
 * A ([`SignaturePublicKey`], [`SignatureSecretKey`]) pair.
 */
public struct SignatureKeypair {
    public var cipherSuite: CipherSuite
    public var publicKey: SignaturePublicKey
    public var secretKey: SignatureSecretKey

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(cipherSuite: CipherSuite, publicKey: SignaturePublicKey, secretKey: SignatureSecretKey) {
        self.cipherSuite = cipherSuite
        self.publicKey = publicKey
        self.secretKey = secretKey
    }
}



extension SignatureKeypair: Equatable, Hashable {
    public static func ==(lhs: SignatureKeypair, rhs: SignatureKeypair) -> Bool {
        if lhs.cipherSuite != rhs.cipherSuite {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.secretKey != rhs.secretKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(cipherSuite)
        hasher.combine(publicKey)
        hasher.combine(secretKey)
    }
}


public struct FfiConverterTypeSignatureKeypair: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureKeypair {
        return
            try SignatureKeypair(
                cipherSuite: FfiConverterTypeCipherSuite.read(from: &buf), 
                publicKey: FfiConverterTypeSignaturePublicKey.read(from: &buf), 
                secretKey: FfiConverterTypeSignatureSecretKey.read(from: &buf)
        )
    }

    public static func write(_ value: SignatureKeypair, into buf: inout [UInt8]) {
        FfiConverterTypeCipherSuite.write(value.cipherSuite, into: &buf)
        FfiConverterTypeSignaturePublicKey.write(value.publicKey, into: &buf)
        FfiConverterTypeSignatureSecretKey.write(value.secretKey, into: &buf)
    }
}


public func FfiConverterTypeSignatureKeypair_lift(_ buf: RustBuffer) throws -> SignatureKeypair {
    return try FfiConverterTypeSignatureKeypair.lift(buf)
}

public func FfiConverterTypeSignatureKeypair_lower(_ value: SignatureKeypair) -> RustBuffer {
    return FfiConverterTypeSignatureKeypair.lower(value)
}


/**
 * A [`mls_rs::crypto::SignaturePublicKey`] wrapper.
 */
public struct SignaturePublicKey {
    public var bytes: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bytes: Data) {
        self.bytes = bytes
    }
}



extension SignaturePublicKey: Equatable, Hashable {
    public static func ==(lhs: SignaturePublicKey, rhs: SignaturePublicKey) -> Bool {
        if lhs.bytes != rhs.bytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytes)
    }
}


public struct FfiConverterTypeSignaturePublicKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignaturePublicKey {
        return
            try SignaturePublicKey(
                bytes: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: SignaturePublicKey, into buf: inout [UInt8]) {
        FfiConverterData.write(value.bytes, into: &buf)
    }
}


public func FfiConverterTypeSignaturePublicKey_lift(_ buf: RustBuffer) throws -> SignaturePublicKey {
    return try FfiConverterTypeSignaturePublicKey.lift(buf)
}

public func FfiConverterTypeSignaturePublicKey_lower(_ value: SignaturePublicKey) -> RustBuffer {
    return FfiConverterTypeSignaturePublicKey.lower(value)
}


/**
 * A [`mls_rs::crypto::SignatureSecretKey`] wrapper.
 */
public struct SignatureSecretKey {
    public var bytes: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bytes: Data) {
        self.bytes = bytes
    }
}



extension SignatureSecretKey: Equatable, Hashable {
    public static func ==(lhs: SignatureSecretKey, rhs: SignatureSecretKey) -> Bool {
        if lhs.bytes != rhs.bytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytes)
    }
}


public struct FfiConverterTypeSignatureSecretKey: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureSecretKey {
        return
            try SignatureSecretKey(
                bytes: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: SignatureSecretKey, into buf: inout [UInt8]) {
        FfiConverterData.write(value.bytes, into: &buf)
    }
}


public func FfiConverterTypeSignatureSecretKey_lift(_ buf: RustBuffer) throws -> SignatureSecretKey {
    return try FfiConverterTypeSignatureSecretKey.lift(buf)
}

public func FfiConverterTypeSignatureSecretKey_lower(_ value: SignatureSecretKey) -> RustBuffer {
    return FfiConverterTypeSignatureSecretKey.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Supported cipher suites.
 *
 * This includes all cipher suites supported by the CryptoKit provider,
 * as documented in RFC 9420: https://www.rfc-editor.org/rfc/rfc9420.html#name-mls-cipher-suites
 * [`mls_rs::CipherSuite`].
 */

public enum CipherSuite {
    
    /**
     * MLS_128_DHKEMX25519_AES128GCM_SHA256_Ed25519 (Suite ID: 1)
     */
    case curve25519Aes128
    /**
     * MLS_128_DHKEMP256_AES128GCM_SHA256_P256 (Suite ID: 2)
     */
    case p256Aes128
    /**
     * MLS_128_DHKEMX25519_CHACHA20POLY1305_SHA256_Ed25519 (Suite ID: 3)
     */
    case curve25519Chacha
    /**
     * MLS_256_DHKEMP521_AES256GCM_SHA512_P521 (Suite ID: 5)
     */
    case p521Aes256
    /**
     * MLS_256_DHKEMP384_AES256GCM_SHA384_P384 (Suite ID: 7)
     */
    case p384Aes256
}


public struct FfiConverterTypeCipherSuite: FfiConverterRustBuffer {
    typealias SwiftType = CipherSuite

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CipherSuite {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .curve25519Aes128
        
        case 2: return .p256Aes128
        
        case 3: return .curve25519Chacha
        
        case 4: return .p521Aes256
        
        case 5: return .p384Aes256
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CipherSuite, into buf: inout [UInt8]) {
        switch value {
        
        
        case .curve25519Aes128:
            writeInt(&buf, Int32(1))
        
        
        case .p256Aes128:
            writeInt(&buf, Int32(2))
        
        
        case .curve25519Chacha:
            writeInt(&buf, Int32(3))
        
        
        case .p521Aes256:
            writeInt(&buf, Int32(4))
        
        
        case .p384Aes256:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeCipherSuite_lift(_ buf: RustBuffer) throws -> CipherSuite {
    return try FfiConverterTypeCipherSuite.lift(buf)
}

public func FfiConverterTypeCipherSuite_lower(_ value: CipherSuite) -> RustBuffer {
    return FfiConverterTypeCipherSuite.lower(value)
}



extension CipherSuite: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum CommitEffect {
    
    case newEpoch(appliedProposals: [Proposal], unusedProposals: [Proposal]
    )
    case reInit
    case removed
}


public struct FfiConverterTypeCommitEffect: FfiConverterRustBuffer {
    typealias SwiftType = CommitEffect

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CommitEffect {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .newEpoch(appliedProposals: try FfiConverterSequenceTypeProposal.read(from: &buf), unusedProposals: try FfiConverterSequenceTypeProposal.read(from: &buf)
        )
        
        case 2: return .reInit
        
        case 3: return .removed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CommitEffect, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .newEpoch(appliedProposals,unusedProposals):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeProposal.write(appliedProposals, into: &buf)
            FfiConverterSequenceTypeProposal.write(unusedProposals, into: &buf)
            
        
        case .reInit:
            writeInt(&buf, Int32(2))
        
        
        case .removed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeCommitEffect_lift(_ buf: RustBuffer) throws -> CommitEffect {
    return try FfiConverterTypeCommitEffect.lift(buf)
}

public func FfiConverterTypeCommitEffect_lower(_ value: CommitEffect) -> RustBuffer {
    return FfiConverterTypeCommitEffect.lower(value)
}





public enum Error {

    
    
    case MlsError(message: String)
    
    case AnyError(message: String)
    
    case MlsCodecError(message: String)
    
    case UnexpectedCallbackError(message: String)
    
}


public struct FfiConverterTypeError: FfiConverterRustBuffer {
    typealias SwiftType = Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .MlsError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AnyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .MlsCodecError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .UnexpectedCallbackError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Error, into buf: inout [UInt8]) {
        switch value {

        

        
        case .MlsError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .AnyError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .MlsCodecError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .UnexpectedCallbackError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


extension Error: Equatable, Hashable {}

extension Error: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ProtocolVersion {
    
    /**
     * MLS version 1.0.
     */
    case mls10
}


public struct FfiConverterTypeProtocolVersion: FfiConverterRustBuffer {
    typealias SwiftType = ProtocolVersion

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProtocolVersion {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mls10
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProtocolVersion, into buf: inout [UInt8]) {
        switch value {
        
        
        case .mls10:
            writeInt(&buf, Int32(1))
        
        }
    }
}


public func FfiConverterTypeProtocolVersion_lift(_ buf: RustBuffer) throws -> ProtocolVersion {
    return try FfiConverterTypeProtocolVersion.lift(buf)
}

public func FfiConverterTypeProtocolVersion_lower(_ value: ProtocolVersion) -> RustBuffer {
    return FfiConverterTypeProtocolVersion.lower(value)
}



extension ProtocolVersion: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * A [`mls_rs::group::ReceivedMessage`] wrapper.
 */

public enum ReceivedMessage {
    
    /**
     * A decrypted application message.
     *
     * The encoding of the data in the message is
     * application-specific and is not determined by MLS.
     */
    case applicationMessage(sender: SigningIdentity, data: Data
    )
    /**
     * A new commit was processed creating a new group state.
     */
    case commit(committer: SigningIdentity, effect: CommitEffect
    )
    /**
     * A proposal was received.
     */
    case receivedProposal(sender: SigningIdentity, proposal: Proposal
    )
    /**
     * Validated GroupInfo object.
     */
    case groupInfo
    /**
     * Validated welcome message.
     */
    case welcome
    /**
     * Validated key package.
     */
    case keyPackage
}


public struct FfiConverterTypeReceivedMessage: FfiConverterRustBuffer {
    typealias SwiftType = ReceivedMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceivedMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .applicationMessage(sender: try FfiConverterTypeSigningIdentity.read(from: &buf), data: try FfiConverterData.read(from: &buf)
        )
        
        case 2: return .commit(committer: try FfiConverterTypeSigningIdentity.read(from: &buf), effect: try FfiConverterTypeCommitEffect.read(from: &buf)
        )
        
        case 3: return .receivedProposal(sender: try FfiConverterTypeSigningIdentity.read(from: &buf), proposal: try FfiConverterTypeProposal.read(from: &buf)
        )
        
        case 4: return .groupInfo
        
        case 5: return .welcome
        
        case 6: return .keyPackage
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ReceivedMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .applicationMessage(sender,data):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSigningIdentity.write(sender, into: &buf)
            FfiConverterData.write(data, into: &buf)
            
        
        case let .commit(committer,effect):
            writeInt(&buf, Int32(2))
            FfiConverterTypeSigningIdentity.write(committer, into: &buf)
            FfiConverterTypeCommitEffect.write(effect, into: &buf)
            
        
        case let .receivedProposal(sender,proposal):
            writeInt(&buf, Int32(3))
            FfiConverterTypeSigningIdentity.write(sender, into: &buf)
            FfiConverterTypeProposal.write(proposal, into: &buf)
            
        
        case .groupInfo:
            writeInt(&buf, Int32(4))
        
        
        case .welcome:
            writeInt(&buf, Int32(5))
        
        
        case .keyPackage:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypeReceivedMessage_lift(_ buf: RustBuffer) throws -> ReceivedMessage {
    return try FfiConverterTypeReceivedMessage.lift(buf)
}

public func FfiConverterTypeReceivedMessage_lower(_ value: ReceivedMessage) -> RustBuffer {
    return FfiConverterTypeReceivedMessage.lower(value)
}




fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeMessage: FfiConverterRustBuffer {
    typealias SwiftType = Message?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMessage.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMessage.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeRatchetTree: FfiConverterRustBuffer {
    typealias SwiftType = RatchetTree?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRatchetTree.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRatchetTree.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceTypeMessage: FfiConverterRustBuffer {
    typealias SwiftType = [Message]

    public static func write(_ value: [Message], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMessage.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Message] {
        let len: Int32 = try readInt(&buf)
        var seq = [Message]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMessage.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeProposal: FfiConverterRustBuffer {
    typealias SwiftType = [Proposal]

    public static func write(_ value: [Proposal], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeProposal.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Proposal] {
        let len: Int32 = try readInt(&buf)
        var seq = [Proposal]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeProposal.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeSigningIdentity: FfiConverterRustBuffer {
    typealias SwiftType = [SigningIdentity]

    public static func write(_ value: [SigningIdentity], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSigningIdentity.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SigningIdentity] {
        let len: Int32 = try readInt(&buf)
        var seq = [SigningIdentity]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSigningIdentity.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeEpochRecord: FfiConverterRustBuffer {
    typealias SwiftType = [EpochRecord]

    public static func write(_ value: [EpochRecord], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEpochRecord.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [EpochRecord] {
        let len: Int32 = try readInt(&buf)
        var seq = [EpochRecord]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeEpochRecord.read(from: &buf))
        }
        return seq
    }
}
/**
 * Create a client config with an in-memory group state storage.
 */
public func clientConfigDefault() -> ClientConfig {
    return try!  FfiConverterTypeClientConfig.lift(try! rustCall() {
    uniffi_mls_rs_uniffi_fn_func_client_config_default($0
    )
})
}
/**
 * Generate a MLS signature keypair.
 *
 * This will use the default mls-lite crypto provider.
 *
 * See [`mls_rs::CipherSuiteProvider::signature_key_generate`]
 * for details.
 */
public func generateSignatureKeypair(cipherSuite: CipherSuite)throws  -> SignatureKeypair {
    return try  FfiConverterTypeSignatureKeypair.lift(try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_mls_rs_uniffi_fn_func_generate_signature_keypair(
        FfiConverterTypeCipherSuite.lower(cipherSuite),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_mls_rs_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_func_client_config_default() != 59081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_func_generate_signature_keypair() != 7255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_client_create_group() != 51396) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_client_generate_key_package_message() != 59803) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_client_join_group() != 25011) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_client_load_group() != 56228) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_client_signing_identity() != 45906) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_add_members() != 25086) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_commit() != 61236) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_encrypt_application_message() != 52772) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_export_tree() != 57366) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_process_incoming_message() != 54676) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_propose_add_members() != 53017) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_propose_remove_members() != 64305) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_remove_members() != 44981) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_group_write_to_storage() != 36882) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_groupstatestorage_state() != 29291) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_groupstatestorage_epoch() != 34987) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_groupstatestorage_write() != 39480) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_method_groupstatestorage_max_epoch_id() != 1285) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mls_rs_uniffi_checksum_constructor_client_new() != 21128) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitGroupStateStorage()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all